openapi: 3.0.0
info:
  title: ShopCx Frontend API
  description: |
    Frontend API for ShopCx demo application with intentionally vulnerable endpoints.
    WARNING: This API contains intentional vulnerabilities and should only be used in controlled environments.
  version: 1.0.0
  contact:
    name: Security Team
    email: security@example.com

servers:
  - url: http://localhost:8080
    description: Local development server

paths:
  /login:
    post:
      summary: User login
      description: |
        Vulnerable to:
        - SQL injection through username and password parameters
        - Weak JWT algorithm (HS256)
        - Insecure password handling
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Username (vulnerable to SQL injection)
                password:
                  type: string
                  description: Password (vulnerable to SQL injection)
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token (using weak HS256 algorithm)
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/{id}:
    get:
      summary: Get user profile
      description: |
        Vulnerable to:
        - IDOR (Insecure Direct Object Reference)
        - SQL injection through user ID
        - Information disclosure (exposes password)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID (vulnerable to SQL injection)
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  username:
                    type: string
                  email:
                    type: string
                  password:
                    type: string
                    description: Exposed password (intentionally insecure)
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/delete-user:
    post:
      summary: Delete user (undocumented endpoint)
      description: |
        Vulnerable to:
        - Missing authentication
        - SQL injection through user_id
        - No authorization checks
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: User ID to delete (vulnerable to SQL injection)
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/products:
    post:
      summary: Create new product
      description: |
        Vulnerable to:
        - SQL injection in product name, price, and description
        - No input validation
        - No authentication required
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Product name (vulnerable to SQL injection)
                price:
                  type: string
                  description: Product price (vulnerable to SQL injection)
                description:
                  type: string
                  description: Product description (vulnerable to SQL injection)
      responses:
        '200':
          description: Product created successfully
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/upload:
    post:
      summary: Upload file
      description: |
        Vulnerable to:
        - Path traversal through filename
        - No file type validation
        - No size limits
        - No authentication required
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: File to upload (vulnerable to path traversal)
      responses:
        '200':
          description: File uploaded successfully
        '400':
          description: No file uploaded
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/comments:
    post:
      summary: Add comment
      description: |
        Vulnerable to:
        - Stored XSS through comment content
        - SQL injection in all fields
        - No input sanitization
        - No authentication required
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                product_id:
                  type: string
                  description: Product ID (vulnerable to SQL injection)
                username:
                  type: string
                  description: Username (vulnerable to SQL injection)
                comment:
                  type: string
                  description: Comment content (vulnerable to XSS)
      responses:
        '200':
          description: Comment added successfully
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Detailed error message (intentionally vulnerable to information disclosure) 